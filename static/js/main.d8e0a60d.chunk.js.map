{"version":3,"sources":["constants.js","App.js","index.js"],"names":["constants","TOTAL_GAME_TIME","VIDEO_HEIGHT","VIDEO_WIDTH","POSSIBLE_POSES","FPS","VIDEO_SETTINGS","video","audio","height","width","maxFrameRate","App","pose","skeleton","neuralNetwork","intervalId","bell","sequence","randomPose","cool","timer","movementCount","debugMode","createButtonGroup","p5","buttonGroup","createDiv","style","playButton","createButton","debugButton","parent","mousePressed","onPlayButtonClick","undefined","clearInterval","play","setInterval","timeIt","classifyData","keypoints","inputs","i","x","position","y","push","classify","getLabel","error","results","console","log","lenght","label","length","mostCommon","filter","Math","floor","random","getData","poses","drawSkeleton","fill","ellipse","a","b","strokeWeight","stroke","line","className","setup","canvasParentRef","annyang","commands","fight","stop","draw","erase","addCommands","start","loadSound","frameRate","createCanvas","background","createCapture","hide","ml5","poseNet","on","outputs","task","debug","load","model","metadata","weights","translate","scale","image","pop","noStroke","textSize","textAlign","text","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d8e0a60d.chunk.js","sourcesContent":["export const constants = {\r\n  TOTAL_GAME_TIME: 30,\r\n  VIDEO_HEIGHT: 480,\r\n  VIDEO_WIDTH: 640,\r\n  POSSIBLE_POSES: [\"a\", \"b\", \"c\", \"d\"],\r\n  FPS: 30,\r\n};\r\n","import ml5 from \"ml5\";\r\nimport Sketch from \"react-p5\";\r\nimport \"react-p5/node_modules/p5/lib/addons/p5.sound\";\r\nimport annyang from \"annyang\";\r\nimport mostCommon from \"array-most-common\";\r\nimport { constants } from \"./constants\";\r\n\r\nconst { TOTAL_GAME_TIME, VIDEO_HEIGHT, VIDEO_WIDTH, POSSIBLE_POSES, FPS } =\r\n  constants;\r\n\r\nconst VIDEO_SETTINGS = {\r\n  video: {\r\n    audio: false,\r\n    height: VIDEO_HEIGHT,\r\n    width: VIDEO_WIDTH,\r\n    maxFrameRate: FPS,\r\n  },\r\n};\r\n\r\nconst App = () => {\r\n  let video;\r\n  let poseNet;\r\n  let pose;\r\n  let skeleton;\r\n  let neuralNetwork;\r\n  let sequence = [];\r\n  let randomPose = \"d\";\r\n  let cool = false;\r\n  let timer = TOTAL_GAME_TIME;\r\n  let movementCount = 0;\r\n  let debugMode = false;\r\n  let intervalId;\r\n  let bell;\r\n\r\n  const setup = (p5, canvasParentRef) => {\r\n    if (annyang) {\r\n      //TODO different commands should have different functions\r\n      let commands = {\r\n        fight: () => onPlayButtonClick(),\r\n        stop: () => onPlayButtonClick(),\r\n        draw: () => (debugMode = !debugMode),\r\n        erase: () => (debugMode = !debugMode),\r\n      };\r\n      annyang.addCommands(commands);\r\n      annyang.start();\r\n    }\r\n    bell = p5.loadSound(\"bell.mp3\");\r\n    p5.frameRate(FPS);\r\n    p5.createCanvas(VIDEO_WIDTH, VIDEO_HEIGHT).parent(canvasParentRef);\r\n    p5.background(51);\r\n    video = p5.createCapture(VIDEO_SETTINGS);\r\n    video.position(0, 0);\r\n    video.hide();\r\n    createButtonGroup(p5);\r\n    poseNet = ml5.poseNet(video);\r\n    poseNet.on(\"pose\", getData);\r\n    let options = {\r\n      inputs: 22,\r\n      outputs: 4,\r\n      task: \"classification\",\r\n      debug: true,\r\n    };\r\n    neuralNetwork = ml5.neuralNetwork(options);\r\n    const modelSpecs = {\r\n      model: \"model/model.json\",\r\n      metadata: \"model/model_meta.json\",\r\n      weights: \"model/model.weights.bin\",\r\n    };\r\n    neuralNetwork?.load(modelSpecs);\r\n  };\r\n\r\n  const createButtonGroup = (p5) => {\r\n    const buttonGroup = p5.createDiv();\r\n    buttonGroup.style(\"display\", \"flex\");\r\n    buttonGroup.style(\"direction\", \"row\");\r\n    buttonGroup.style(\"margin\", \"20px\");\r\n    const playButton = p5.createButton(\"Fight & Stop\");\r\n    const debugButton = p5.createButton(\"Draw & Erase\");\r\n\r\n    playButton.parent(buttonGroup);\r\n    debugButton.parent(buttonGroup);\r\n\r\n    playButton.mousePressed(() => onPlayButtonClick(p5));\r\n    debugButton.mousePressed(() => (debugMode = !debugMode));\r\n  };\r\n\r\n  const onPlayButtonClick = () => {\r\n    if (intervalId !== undefined) {\r\n      clearInterval(intervalId);\r\n      intervalId = undefined;\r\n      timer = TOTAL_GAME_TIME;\r\n      bell.play();\r\n    } else {\r\n      movementCount = 0;\r\n      bell.play();\r\n      intervalId = setInterval(timeIt, 1000);\r\n    }\r\n  };\r\n\r\n  const timeIt = () => {\r\n    if (timer > 0) {\r\n      timer--;\r\n    }\r\n  };\r\n\r\n  const classifyData = () => {\r\n    if (pose && pose.keypoints) {\r\n      let inputs = [];\r\n      for (let i = 0; i < 11; i++) {\r\n        let x = pose.keypoints[i].position.x;\r\n        let y = pose.keypoints[i].position.y;\r\n        inputs.push(x);\r\n        inputs.push(y);\r\n      }\r\n      neuralNetwork.classify(inputs, getLabel);\r\n    } else {\r\n      classifyData();\r\n    }\r\n  };\r\n\r\n  const getLabel = (error, results) => {\r\n    if (error) {\r\n      console.log(\"error\");\r\n      return;\r\n    }\r\n    if (results !== undefined && results.lenght !== 0) {\r\n      sequence.push(results[0].label);\r\n    }\r\n    if (sequence.length === 10) {\r\n      if (mostCommon(sequence) === randomPose) {\r\n        cool = true; // turn poseLabel green\r\n        timer !== 30 && movementCount++;\r\n        randomPose = POSSIBLE_POSES.filter((pose) => pose !== randomPose)[\r\n          Math.floor(\r\n            Math.random() *\r\n              POSSIBLE_POSES.filter((pose) => pose !== randomPose).length\r\n          )\r\n        ];\r\n      }\r\n      sequence = [];\r\n    }\r\n  };\r\n\r\n  const getData = (poses) => {\r\n    if (poses.length === 0) {\r\n      pose = {};\r\n    } else {\r\n      pose = poses[0].pose;\r\n      skeleton = poses[0].skeleton;\r\n      classifyData();\r\n    }\r\n  };\r\n\r\n  const draw = (p5) => {\r\n    if (true) {\r\n      p5.push();\r\n      p5.translate(VIDEO_WIDTH, 0);\r\n      p5.scale(-1, 1);\r\n      p5.image(video, 0, 0, VIDEO_WIDTH, VIDEO_HEIGHT);\r\n      if (pose !== undefined && pose.keypoints) {\r\n        debugMode && drawSkeleton(p5, pose.keypoints);\r\n        p5.pop();\r\n        if (cool) {\r\n          p5.fill(0, 255, 0);\r\n          //TODO delay this a bit more\r\n          cool = false;\r\n        } else {\r\n          p5.fill(255, 0, 255);\r\n        }\r\n        p5.noStroke();\r\n        p5.textSize(100);\r\n        p5.textAlign(\"CENTER\", \"CENTER\");\r\n        p5.text(randomPose, VIDEO_WIDTH / 2 + 220, VIDEO_HEIGHT / 2 - 110);\r\n        p5.textSize(40);\r\n        p5.fill(255, 0, 0);\r\n        p5.text(`Time: ${timer}`, VIDEO_WIDTH / 2 + 160, VIDEO_HEIGHT / 2 - 70);\r\n        p5.textSize(25);\r\n        p5.fill(255, 0, 255);\r\n        p5.text(\r\n          `Score: ${movementCount}`,\r\n          VIDEO_WIDTH / 2 - 310,\r\n          VIDEO_HEIGHT / 2 - 170\r\n        );\r\n        p5.fill(255, 0, 255);\r\n        p5.ellipse(VIDEO_WIDTH / 2, VIDEO_HEIGHT / 2 - 20, 80, 80);\r\n      }\r\n      if (timer === 0) {\r\n        onPlayButtonClick();\r\n      }\r\n    }\r\n  };\r\n\r\n  const drawSkeleton = (p5, keypoints) => {\r\n    for (let i = 0; i < keypoints.length; i++) {\r\n      let x = keypoints[i].position.x;\r\n      let y = keypoints[i].position.y;\r\n      p5.fill(0, 255, 0);\r\n      p5.ellipse(x, y, 16, 16);\r\n    }\r\n\r\n    for (let i = 0; i < skeleton.length; i++) {\r\n      let a = skeleton[i][0];\r\n      let b = skeleton[i][1];\r\n      p5.strokeWeight(2);\r\n      p5.stroke(255);\r\n      p5.line(a.position.x, a.position.y, b.position.x, b.position.y);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <p className=\"title\">AI Boxing Trainer</p>~\r\n      <Sketch setup={setup} draw={draw} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}