{"version":3,"sources":["constants.js","App.js","index.js"],"names":["constants","WAITING","COLLECTING","TOTAL_GAME_TIME","VIDEO_HEIGHT","VIDEO_WIDTH","POSSIBLE_POSES","FPS","VIDEO_SETTINGS","video","audio","height","width","maxFrameRate","App","poseNet","pose","skeleton","neuralNetwork","targetLabel","state","sequence","randomPose","cool","running","timer","movementCount","debugMode","createButtonGroup","p5","buttonGroup","createDiv","style","playButton","createButton","debugButton","trainButton","parent","mousePressed","onPlayButtonClick","onTrainButtonClick","removeListener","getData","background","noLoop","ml5","on","inputs","outputs","task","debug","load","model","metadata","weights","classifyData","loop","loadData","train","keypoints","i","x","position","y","push","classify","getLabel","setTimeout","error","results","console","log","undefined","lenght","label","length","mostCommon","filter","Math","floor","random","normalizeData","epochs","saveModel","save","poses","target","addData","drawSkeleton","fill","ellipse","a","b","strokeWeight","stroke","line","className","setup","canvasParentRef","frameRate","createCanvas","createCapture","hide","draw","translate","scale","image","pop","noStroke","textSize","textAlign","text","frameCount","keyPressed","event","key","saveData","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e58c4ed6.chunk.js","sourcesContent":["export const constants = {\r\n  TOTAL_GAME_TIME: 30,\r\n  VIDEO_HEIGHT: 480,\r\n  VIDEO_WIDTH: 640,\r\n  POSSIBLE_POSES: [\"a\", \"b\", \"c\", \"d\"],\r\n  STATE: { WAITING: \"waiting\", COLLECTING: \"collecting\" },\r\n  FPS: 60,\r\n};\r\n","import ml5 from \"ml5\";\nimport Sketch from \"react-p5\";\nimport mostCommon from \"array-most-common\";\nimport { constants } from \"./constants\";\n\nconst {\n  TOTAL_GAME_TIME,\n  VIDEO_HEIGHT,\n  VIDEO_WIDTH,\n  POSSIBLE_POSES,\n  STATE: { WAITING, COLLECTING },\n  FPS,\n} = constants;\n\nconst VIDEO_SETTINGS = {\n  video: {\n    audio: false,\n    height: VIDEO_HEIGHT,\n    width: VIDEO_WIDTH,\n    maxFrameRate: FPS,\n  },\n};\n\nconst App = () => {\n  let video;\n  let poseNet;\n  let pose;\n  let skeleton;\n  let neuralNetwork;\n  let state = WAITING;\n  let targetLabel;\n  let sequence = [];\n  let randomPose = \"d\";\n  let cool = false;\n  let running = false;\n  let timer = TOTAL_GAME_TIME;\n  let movementCount = 0;\n  let debugMode = false;\n\n  const keyPressed = (event) => {\n    if (event.key === \"s\") {\n      neuralNetwork.saveData();\n    } else {\n      targetLabel = event.key;\n      console.log(targetLabel);\n      setTimeout(() => {\n        console.log(\"collecting\");\n        state = COLLECTING;\n        setTimeout(() => {\n          console.log(\"not collecting\");\n          state = WAITING;\n        }, 60000);\n      }, 10000);\n    }\n  };\n\n  const setup = (p5, canvasParentRef) => {\n    p5.frameRate(FPS);\n    p5.createCanvas(VIDEO_WIDTH, VIDEO_HEIGHT, \"WEBGL\").parent(canvasParentRef);\n    p5.background(51);\n    video = p5.createCapture(VIDEO_SETTINGS);\n    video.position(0, 0);\n    video.hide();\n    createButtonGroup(p5);\n    p5.noLoop();\n  };\n\n  const createButtonGroup = (p5) => {\n    const buttonGroup = p5.createDiv();\n    buttonGroup.style(\"display\", \"flex\");\n    buttonGroup.style(\"direction\", \"row\");\n    const playButton = p5.createButton(\"Play | Reset\");\n    const debugButton = p5.createButton(\"Debug\");\n    const trainButton = p5.createButton(\"Train\");\n    playButton.parent(buttonGroup);\n    debugButton.parent(buttonGroup);\n    trainButton.parent(buttonGroup);\n    playButton.mousePressed(() => onPlayButtonClick(p5));\n    debugButton.mousePressed(() => (debugMode = !debugMode));\n    trainButton.mousePressed(() => onTrainButtonClick());\n  };\n\n  const onPlayButtonClick = (p5) => {\n    if (!running) {\n      poseNet = ml5.poseNet(video);\n      poseNet.on(\"pose\", getData);\n      let options = {\n        inputs: 22,\n        outputs: 4,\n        task: \"classification\",\n        debug: true,\n      };\n      neuralNetwork = ml5.neuralNetwork(options);\n      const modelSpecs = {\n        model: \"mini/model.json\",\n        metadata: \"mini/model_meta.json\",\n        weights: \"mini/model.weights.bin\",\n      };\n      neuralNetwork?.load(modelSpecs, classifyData);\n      running = true;\n      p5.loop();\n    } else {\n      running = false;\n      timer = TOTAL_GAME_TIME;\n      poseNet?.removeListener(\"pose\", getData);\n      p5.background(51);\n      p5.noLoop();\n    }\n  };\n\n  const onTrainButtonClick = () => {\n    let options = {\n      inputs: 22,\n      outputs: 4,\n      task: \"classification\",\n      debug: true,\n    };\n    neuralNetwork = ml5.neuralNetwork(options);\n    neuralNetwork.loadData(\"mini.json\", train);\n  };\n\n  const classifyData = () => {\n    if (pose && pose.keypoints && running && timer !== 0) {\n      let inputs = [];\n      for (let i = 0; i < 11; i++) {\n        let x = pose.keypoints[i].position.x;\n        let y = pose.keypoints[i].position.y;\n        inputs.push(x);\n        inputs.push(y);\n      }\n      neuralNetwork.classify(inputs, getLabel);\n    } else if (!running || timer === 0) {\n      return;\n    } else {\n      setTimeout(classifyData, 100);\n    }\n  };\n\n  const getLabel = (error, results) => {\n    if (error) {\n      console.log(\"error\");\n      return;\n    }\n    if (results !== undefined && results.lenght !== 0) {\n      sequence.push(results[0].label);\n    }\n    if (sequence.length === 20) {\n      if (mostCommon(sequence) === randomPose) {\n        cool = true; // turn poseLabel green\n        movementCount++;\n        randomPose = POSSIBLE_POSES.filter((pose) => pose !== randomPose)[\n          Math.floor(\n            Math.random() *\n              POSSIBLE_POSES.filter((pose) => pose !== randomPose).length\n          )\n        ];\n      }\n      sequence = [];\n    }\n    classifyData();\n  };\n\n  const train = () => {\n    neuralNetwork.normalizeData();\n    neuralNetwork.train({ epochs: 30 }, saveModel);\n  };\n\n  const saveModel = () => {\n    neuralNetwork.save();\n  };\n\n  const getData = (poses) => {\n    if (poses.length === 0) {\n      pose = {};\n    } else {\n      pose = poses[0].pose;\n      skeleton = poses[0].skeleton;\n      if (state === COLLECTING) {\n        let inputs = [];\n        for (let i = 0; i < 11; i++) {\n          let x = pose.keypoints[i].position.x;\n          let y = pose.keypoints[i].position.y;\n          inputs.push(x);\n          inputs.push(y);\n        }\n        let target = [targetLabel];\n        neuralNetwork.addData(inputs, target);\n      }\n    }\n  };\n\n  const draw = (p5) => {\n    if (running) {\n      p5.push();\n      p5.translate(VIDEO_WIDTH, 0);\n      p5.scale(-1, 1);\n      p5.image(video, 0, 0, VIDEO_WIDTH, VIDEO_HEIGHT);\n      if (pose !== undefined && pose.keypoints) {\n        debugMode && drawSkeleton(p5, pose.keypoints);\n        p5.pop();\n        if (cool) {\n          p5.fill(0, 255, 0);\n          //to do delay this a bit more\n          cool = false;\n        } else {\n          p5.fill(255, 0, 255);\n        }\n        p5.noStroke();\n        p5.textSize(100);\n        p5.textAlign(\"CENTER\", \"CENTER\");\n        p5.text(randomPose, VIDEO_WIDTH / 2 + 220, VIDEO_HEIGHT / 2 - 110);\n        p5.textSize(40);\n        p5.fill(255, 0, 0);\n        p5.text(timer, VIDEO_WIDTH / 2 + 225, VIDEO_HEIGHT / 2 - 70);\n        p5.textSize(20);\n        p5.fill(0, 255, 0);\n        p5.text(\n          `FPS: ${p5.frameRate()}`,\n          VIDEO_WIDTH / 2 + 215,\n          VIDEO_HEIGHT / 2 - 40\n        );\n        p5.fill(255, 0, 255);\n        p5.ellipse(VIDEO_WIDTH / 2, VIDEO_HEIGHT / 2 - 20, 80, 80);\n        p5.frameCount % FPS === 0 && timer > 0 && timer--;\n      }\n      if (timer === 0) {\n        running = false;\n        timer = TOTAL_GAME_TIME;\n        poseNet?.removeListener(\"pose\", getData);\n        p5.background(51);\n        p5.textSize(40);\n        p5.text(\n          `Score: ${movementCount}`,\n          VIDEO_WIDTH / 2 - 150,\n          VIDEO_HEIGHT / 2\n        );\n        p5.noLoop();\n        movementCount = 0;\n      }\n    }\n  };\n\n  const drawSkeleton = (p5, keypoints) => {\n    for (let i = 0; i < keypoints.length; i++) {\n      let x = keypoints[i].position.x;\n      let y = keypoints[i].position.y;\n      p5.fill(0, 255, 0);\n      p5.ellipse(x, y, 16, 16);\n    }\n\n    for (let i = 0; i < skeleton.length; i++) {\n      let a = skeleton[i][0];\n      let b = skeleton[i][1];\n      p5.strokeWeight(2);\n      p5.stroke(255);\n      p5.line(a.position.x, a.position.y, b.position.x, b.position.y);\n    }\n  };\n\n  return (\n    <div>\n      <p className=\"title\">Boxing</p>\n      <Sketch setup={setup} draw={draw} keyPressed={keyPressed} />\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}